/*
 * Generated by XDoclet - Do not edit!
 */
package multimonster.systemadministration.interfaces;

/**
 * Remote interface for SystemAdministrationImpl.
 */
public interface SystemAdministrationImpl
   extends javax.ejb.EJBObject
{

   public java.lang.String getSettingDescription( multimonster.common.setting.SettingID settingID )
      throws multimonster.systemadministration.exceptions.SettingNotExistsException, java.rmi.RemoteException;

   public void registerSetting( multimonster.common.setting.Setting setting )
      throws java.rmi.RemoteException;

   public void releaseSetting( multimonster.common.setting.SettingID settingId )
      throws java.rmi.RemoteException;

   public void setSettingValue( multimonster.common.setting.SettingID settingID,multimonster.common.setting.SettingValue value )
      throws multimonster.systemadministration.exceptions.SettingNotExistsException, multimonster.systemadministration.exceptions.SettingOutOfDomainException, java.rmi.RemoteException;

   public multimonster.common.setting.SettingValue getSettingValue( multimonster.common.setting.SettingID settingID )
      throws multimonster.systemadministration.exceptions.SettingNotExistsException, java.rmi.RemoteException;

   public multimonster.common.setting.Setting[] getAllSettings(  )
      throws java.rmi.RemoteException;

   public multimonster.common.media.MOIdentifier addMediaObject( multimonster.common.media.MediaObject mediaObject,multimonster.common.UserIdentifier user )
      throws multimonster.exceptions.MultiMonsterException, java.rmi.RemoteException;

   public void modifyMediaObject( multimonster.common.media.MediaObject mediaObject,multimonster.common.UserIdentifier user )
      throws java.rmi.RemoteException;

   public multimonster.common.InputOption[] getInputOptions( multimonster.common.UserIdentifier user )
      throws java.rmi.RemoteException;

   public multimonster.common.OutputOption[] getOutputOptions( multimonster.common.UserIdentifier user,multimonster.common.media.MOIdentifier mediaObject )
      throws java.rmi.RemoteException;

   public void getFilterOptions(  )
      throws java.rmi.RemoteException;

   public multimonster.common.media.MetaDataAccess getMetaData( multimonster.common.media.MOIdentifier mOId )
      throws java.rmi.RemoteException;

   public void registerPlugin( multimonster.common.plugin.PlugInInformation regInfo )
      throws java.rmi.RemoteException;

   public void releasePlugin( multimonster.common.plugin.PlugInIdentifier pluginID )
      throws java.rmi.RemoteException;

   public void removePlugin( multimonster.common.plugin.PlugInIdentifier pluginID )
      throws java.rmi.RemoteException;

   public multimonster.common.SearchResult[] search( multimonster.common.SearchCriteria criteria )
      throws multimonster.exceptions.DBNotAvailableException, java.rmi.RemoteException;

   public void addMediaInstance( multimonster.common.media.MediaInstance instance,multimonster.common.media.MetaData meta )
      throws multimonster.exceptions.MultiMonsterException, java.rmi.RemoteException;

   public void remMediaInstance( multimonster.common.media.MIIdentifier id )
      throws java.rmi.RemoteException;

   public multimonster.common.media.MediaInstance getMediaInstance( multimonster.common.media.MOIdentifier mOId,multimonster.common.FormatId fId )
      throws multimonster.exceptions.MultiMonsterException, java.rmi.RemoteException;

   public multimonster.common.media.MIIdentifier getSourceMediaInstance( multimonster.common.media.MOIdentifier mOId )
      throws multimonster.exceptions.MultiMonsterException, java.rmi.RemoteException;

   public void remMediaObject( multimonster.common.media.MOIdentifier id,multimonster.common.UserIdentifier user )
      throws multimonster.exceptions.MultiMonsterException, java.rmi.RemoteException;

   public multimonster.common.resource.Costs calculateCosts( multimonster.common.media.MOIdentifier id,multimonster.common.edit.FilterAction[] actions )
      throws java.rmi.RemoteException;

   public multimonster.common.resource.Costs calculateCosts( multimonster.common.media.MOIdentifier mOId,multimonster.common.FormatId formatId,multimonster.common.ProtocolId protocolId,multimonster.common.Action action )
      throws java.rmi.RemoteException;

   public multimonster.common.resource.Costs calculateCosts( multimonster.common.media.MOIdentifier mOId,multimonster.common.ProtocolId protocolId,multimonster.common.Action action )
      throws java.rmi.RemoteException;

   public void realCosts( multimonster.common.media.MOIdentifier id,multimonster.common.edit.FilterAction[] actions,multimonster.common.resource.Costs realcosts )
      throws java.rmi.RemoteException;

   public multimonster.common.Format getFormat( multimonster.common.FormatId fId )
      throws java.rmi.RemoteException;

   public multimonster.common.plugin.PlugInIdentifier getConverterPlugInId( multimonster.common.Format input,multimonster.common.Format output )
      throws java.rmi.RemoteException;

   public multimonster.common.plugin.PlugInIdentifier getProxyPlugInId( multimonster.common.ProtocolId protID,boolean isInput )
      throws java.rmi.RemoteException;

   public multimonster.common.plugin.PlugInIdentifier getTransporterPlugInId( multimonster.common.ProtocolId protID,boolean isInput )
      throws java.rmi.RemoteException;

}
